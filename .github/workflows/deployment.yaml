name: Docker and Deploy

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_TAG: latest

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.check-status.outcome }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Build Docker image for frontend
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Check build status
        id: check-status
        run: echo "success"
        continue-on-error: false

  build-backend:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.check-status.outcome }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Build Docker image for backend
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Check build status
        id: check-status
        run: echo "success"
        continue-on-error: false

  push-images:
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-latest
    steps:
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Push frontend image
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ./frontend
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ env.IMAGE_TAG }}

      - name: Push backend image
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ./backend
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ env.IMAGE_TAG }}

  sign-images:
    needs: [push-images]
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.check-status.outcome }}
    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.7.0

      - name: Sign frontend image
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ env.IMAGE_TAG }}

      - name: Sign backend image
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ env.IMAGE_TAG }}

      - name: Check sign status
        id: check-status
        run: echo "success"
        continue-on-error: false

  deploy:
    needs: [sign-images]
    runs-on: ubuntu-latest
    steps:
      - name: SSH and Deploy to Server
        uses: appleboy/ssh-action@master
        env: 
          REGISTRY: ghcr.io
          IMAGE_NAME: ${{ github.repository }}
          IMAGE_TAG: latest
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Log into GitHub Container Registry
            echo ${{ secrets.GHCR_PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Navigate to the deployment directory on the server
            cd "${{ secrets.DEPLOY_PATH }}/$(basename "${{ github.repository }}")"

            # Pull and deploy frontend and backend images
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ env.IMAGE_TAG }}
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ env.IMAGE_TAG }}
            docker compose up -d

      - name: Verify deployment
        run: echo "Deployment successful"
