name: Docker and Deploy

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io/henrymanke
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.7.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image for frontend
        id: frontend-build-and-push
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  
      - name: Build and push Docker image for backend
        id: backend-build-and-push
        uses: docker/build-push-action@v5.0.0
        with:
          context: ./backend
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the published Docker images for frontend
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.frontend-build-and-push.outputs.digest }}
        run: |
          if [ -n "$DIGEST" ]; then
              echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
          else
              echo "Frontend image digest is empty. Skipping sign step for frontend."
          fi

      - name: Sign the published Docker images for backend
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.backend-build-and-push.outputs.digest }}
        run: |
          if [ -n "$DIGEST" ]; then
              echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
          else
              echo "Backend image digest is empty. Skipping sign step for backend."
          fi
      
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: SSH and Deploy to Server
        uses: appleboy/ssh-action@master
        env: 
            IMAGE_TAG: ${{ github.sha }}
            REGISTRY: ghcr.io/henrymanke
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Log into GitHub Container Registry
            echo ${{ secrets.GHCR_PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin || exit 1

            # Extract the project name from the repository name
            PROJECT_NAME=$(basename "${{ github.repository }}")
            
            # Navigate to the project directory on the server
            cd "${{ secrets.DEPLOY_PATH }}/${PROJECT_NAME}" || exit 1
            
            # Pull images with fallback to 'latest'
            docker pull $REGISTRY/frontend:$IMAGE_TAG || docker pull $REGISTRY/$IMAGE_NAME/frontend:latest
            docker pull $REGISTRY/backend:$IMAGE_TAG || docker pull $REGISTRY/$IMAGE_NAME/backend:latest

            # Start services
            docker compose up -d || { echo "Starting containers failed"; exit 1; }


